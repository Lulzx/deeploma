{"version":3,"sources":["../node_modules/encoding/lib sync","MyComponents/Methods.js","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","easyvk","require","App","state","SN","start_date","end_date","fields","table_body","initial_state","clientId","clientSecret","then","vk","console","log","session","app_id","Navbar","expand","bg","variant","Brand","href","Container","className","Row","DropdownButton","key","title","Dropdown","Item","eventKey","style","margin","placeholder","onDayChange","day","Form","Group","controlId","Label","Control","as","rows","Button","size","block","Table","striped","bordered","hover","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src","type","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iSAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,iXCRnBC,G,cAASC,EAAQ,M,IC2FRC,E,kDArEb,aAAe,IAAD,8BACZ,gBATFC,MAAQ,CACNC,GAAK,GACLC,WAAY,EACZC,SAAU,EACVC,OAAQ,GACRC,WAAa,IAGD,EADdC,cACc,eADO,EAAKN,OACZ,E,gEDpBZH,EAAO,CACHU,SAAW,QACXC,aAAc,4EACfC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAAGG,QAAQC,a,+BC2B3B,OACI,oCACE,kBAACC,EAAA,EAAD,CAAQC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QACpC,kBAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,SAAnB,QAIF,kBAACC,EAAA,EAAD,CAAWC,UAAU,aACjB,kBAACC,EAAA,EAAD,CAAKD,UAAU,kBACb,kBAACE,EAAA,EAAD,CACIC,IAAI,YACJ7B,GAAG,YACH8B,MAAM,gDAER,kBAACC,EAAA,EAASC,KAAV,CAAeC,SAAS,KAAxB,0DACA,kBAACF,EAAA,EAASC,KAAV,CAAeC,SAAS,KAAxB,qDAGF,kBAAC,IAAD,CAAgBC,MAAO,CAACC,OAAO,IAAKC,YAAa,gEAAeC,YAAa,SAAAC,GAAG,OAAIvB,QAAQC,IAAIsB,MAChG,kBAAC,IAAD,CAAgBJ,MAAO,CAACC,OAAO,IAAKC,YAAa,0DAAcC,YAAa,SAAAC,GAAG,OAAIvB,QAAQC,IAAIsB,OAEjG,kBAACX,EAAA,EAAD,CAAKD,UAAU,kBAEX,kBAACa,EAAA,EAAKC,MAAN,CAAYC,UAAU,gCAClB,kBAACF,EAAA,EAAKG,MAAN,yBACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,GAAG,WAAWC,KAAK,QAGzC,kBAAClB,EAAA,EAAD,CAAKD,UAAU,kBACX,kBAACoB,EAAA,EAAD,CAAQxB,QAAQ,UAAUyB,KAAK,KAAKC,OAAK,GAAzC,uBAIJ,kBAACrB,EAAA,EAAD,CAAKD,UAAU,kBACX,kBAACuB,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC7B,+BACA,4BACI,iCACA,oEACA,oEACA,6FACA,sFACA,8DACA,0EACA,oGAGA,+BACCC,KAAKjD,MAAMK,oB,GApEhB6C,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,4BAAQC,IAAI,2CAA4CC,KAAK,oBAC/D,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxD,MAAK,SAAAyD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.8c2d08c8.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 332;","const easyvk = require('easyvk')\r\nfunction load_posts() {\r\n    easyvk({\r\n        clientId : 7101425,\r\n        clientSecret: \"23acc95023acc95023acc9504023c092a1223ac23acc9507ef4dc240205bcafea27244d\"\r\n    }).then(vk => {\r\n        console.log(vk.session.app_id);\r\n    })\r\n}\r\n\r\nexport {load_posts}","import React, { Component,useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// eslint-disable-next-line\r\nimport { Alert, Container, Dropdown, Navbar, Row, Button, Col, DropdownButton, Card, Modal, Table,Form } from 'react-bootstrap'\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\r\nimport \"react-day-picker/lib/style.css\";\r\nimport './App.css';\r\n\r\n// import result from './data.json';\r\nimport { Select } from \"react-dropdown-select\";\r\nimport {load_posts} from \"./MyComponents/Methods\"\r\n\r\nclass App extends Component {\r\n  state = {\r\n    SN : \"\",\r\n    start_date: 0,\r\n    end_date: 0,\r\n    fields: {},\r\n    table_body : []\r\n  };\r\n  initial_state = { ...this.state };\r\n  constructor() {\r\n    super();\r\n\r\n  }\r\n  componentDidMount() {\r\n    load_posts()\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n        <>\r\n          <Navbar expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand href=\"#home\">\r\n              APP\r\n            </Navbar.Brand>\r\n          </Navbar>\r\n          <Container className='mt-4 mb-4'>\r\n              <Row className='ml-4 mr-4 mb-4'>\r\n                <DropdownButton\r\n                    key=\"SN-button\"\r\n                    id=\"SN-button\"\r\n                    title=\"Соц. Сеть\"\r\n                >\r\n                  <Dropdown.Item eventKey=\"1\">ВКонтакте</Dropdown.Item>\r\n                  <Dropdown.Item eventKey=\"2\">Телеграм</Dropdown.Item>\r\n                </DropdownButton>\r\n\r\n                <DayPickerInput style={{margin:10}} placeholder={\"Дата начала\"} onDayChange={day => console.log(day)} />\r\n                <DayPickerInput style={{margin:10}} placeholder={\"Дата конца\"} onDayChange={day => console.log(day)} />\r\n              </Row>\r\n              <Row className='ml-4 mr-4 mb-4'>\r\n                  {/* eslint-disable-next-line react/jsx-no-undef */}\r\n                  <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                      <Form.Label>Example textarea</Form.Label>\r\n                      <Form.Control as=\"textarea\" rows=\"3\" />\r\n                  </Form.Group>\r\n              </Row>\r\n              <Row className='ml-4 mr-4 mb-4'>\r\n                  <Button variant=\"primary\" size=\"lg\" block>\r\n                      Block level button\r\n                  </Button>\r\n              </Row>\r\n              <Row className='ml-4 mr-4 mb-4'>\r\n                  <Table striped bordered hover>\r\n                  <thead>\r\n                  <tr>\r\n                      <th>#</th>\r\n                      <th>Группа</th>\r\n                      <th>Ссылка</th>\r\n                      <th>Текст поста</th>\r\n                      <th>Просмотры</th>\r\n                      <th>Лайки</th>\r\n                      <th>Репосты</th>\r\n                      <th>Комментарии</th>\r\n                  </tr>\r\n                  </thead>\r\n                      <tbody>\r\n                      {this.state.table_body}\r\n                      </tbody>\r\n                  </Table>\r\n                  </Row>\r\n               </Container>\r\n        </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <script src=\"https://vk.com/js/api/xd_connection.js?2\"  type=\"text/javascript\"></script>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}