{
  "version": 3,
  "sources": [
    "App.js",
    "serviceWorker.js",
    "index.js"
  ],
  "names": [
    "expandRow",
    "onlyOneExpanding",
    "renderer",
    "row",
    "text",
    "App",
    "state",
    "Chosen_SN",
    "SN",
    "today",
    "Date",
    "groups",
    "data",
    "sm_ids",
    "columns",
    "from",
    "undefined",
    "to",
    "buttonDisable",
    "isLoading",
    "initial_state",
    "handleFromChange",
    "bind",
    "handleToChange",
    "handleInput",
    "formatDate",
    "date",
    "toLocaleString",
    "dataField",
    "filter",
    "selectFilter",
    "options",
    "this",
    "placeholder",
    "numberFilter",
    "formatter",
    "dateFilter",
    "style",
    "width",
    "textFilter",
    "sort",
    "0",
    "1",
    "2",
    "setState",
    "isReady",
    "from_unix",
    "getTime",
    "to_unix",
    "onlyUnique",
    "value",
    "index",
    "self",
    "indexOf",
    "fetch",
    "then",
    "res",
    "json",
    "response",
    "Object",
    "values",
    "map",
    "post",
    "group_name",
    "group",
    "label",
    "moment",
    "diff",
    "getDayPicker",
    "showMonth",
    "showFromMonth",
    "modifiers",
    "start",
    "end",
    "Navbar",
    "expand",
    "bg",
    "variant",
    "Brand",
    "href",
    "Container",
    "className",
    "Row",
    "onChange",
    "val",
    "handleSelect",
    "format",
    "parseDate",
    "dayPickerProps",
    "selectedDays",
    "disabledDays",
    "after",
    "toMonth",
    "numberOfMonths",
    "locale",
    "localeUtils",
    "MomentLocaleUtils",
    "onDayClick",
    "getInput",
    "focus",
    "onDayChange",
    "ref",
    "el",
    "before",
    "month",
    "fromMonth",
    "Helmet",
    "Form",
    "Group",
    "controlId",
    "Label",
    "Control",
    "as",
    "rows",
    "event",
    "target",
    "Button",
    "size",
    "block",
    "disabled",
    "onClick",
    "load_data",
    "keyField",
    "filterFactory",
    "pagination",
    "paginationFactory",
    "striped",
    "condensed",
    "Component",
    "Boolean",
    "window",
    "location",
    "hostname",
    "match",
    "ReactDOM",
    "render",
    "StrictMode",
    "document",
    "getElementById",
    "navigator",
    "serviceWorker",
    "ready",
    "registration",
    "unregister",
    "catch",
    "error",
    "console",
    "message"
  ],
  "mappings": "ycA8BMA,EAAY,CACdC,kBAAkB,EAClBC,SAAU,SAAAC,GAAG,OACT,6BACI,mGACA,gCAAMA,EAAIC,KAAV,QAoWGC,E,kDA5UX,aAAe,IAAD,8BACV,gBAnBJC,MAAQ,CACJC,UAAW,GACXC,GAAI,GACJC,MAAO,IAAIC,KACXC,OAAQ,GACRC,KAAM,GACNC,OAAQ,GACRC,QAAS,CAAC,CACNV,KAAM,qFAEVW,UAAMC,EACNC,QAAID,EACJE,eAAe,EACfC,WAAW,GAKD,EAHdC,cAGc,eAHM,EAAKd,OAMrB,EAAKe,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBAGtB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBAPT,E,yDAUDd,GACT,IAAIM,EAAU,GAEd,SAASW,EAAWC,GAChB,OAAO,IAAIhB,KAAKgB,GAAMC,eAAe,SAGzC,OAAQnB,GACJ,IAAM,KACFM,EAAU,CACN,CACIV,KAAM,uCACNwB,UAAW,aACXC,OAAQC,uBAAa,CACjBC,QAASC,KAAK1B,MAAMK,OACpBsB,YAAa,OAGrB,CACI7B,KAAM,+DACNwB,UAAW,UACXC,OAAQK,uBAAa,CAACD,YAAa,iGAEvC,CACI7B,KAAM,2DACNwB,UAAW,YACXO,UAAWV,EACXI,OAAQO,qBAAW,CACfC,MAAO,CAACC,MAAO,QACfL,YAAa,yEAIrB,CACI7B,KAAM,mCACNwB,UAAW,OACXC,OAAQU,qBAAW,CAACN,YAAa,iGAIrC,CACI7B,KAAM,yDACNwB,UAAW,QACXC,OAAQK,uBAAa,CAACD,YAAa,gGACnCO,MAAM,GAGV,CACIpC,KAAM,iCACNwB,UAAW,QACXC,OAAQK,uBAAa,CAACD,YAAa,gGACnCO,MAAM,GAGV,CACIpC,KAAM,6CACNwB,UAAW,UACXC,OAAQK,uBAAa,CAACD,YAAa,gGACnCO,MAAM,GAGV,CACIpC,KAAM,qEACNwB,UAAW,WACXC,OAAQK,uBAAa,CAACD,YAAa,gGACnCO,MAAM,GAGV,CACIpC,KAAM,sHACNwB,UAAW,aACXC,OAAQC,uBAAa,CACjBC,QAAS,CACLU,EAAG,eACHC,EAAG,sBAEPT,YAAa,OAGrB,CACI7B,KAAM,0GACNwB,UAAW,YACXC,OAAQC,uBAAa,CACjBC,QAAS,CACLU,EAAG,+DACHC,EAAG,qEACHC,EAAG,gEAEPV,YAAa,QAIzBD,KAAKY,SAAS,CAAC9B,QAASA,EAASI,cAAec,KAAKa,UAAWtC,UAAWC,IAC3E,MACJ,IAAM,KACFM,EAAU,CACN,CACIV,KAAM,uCACNwB,UAAW,aACXC,OAAQC,uBAAa,CACjBC,QAASC,KAAK1B,MAAMK,OACpBsB,YAAa,OAGrB,CACI7B,KAAM,+DACNwB,UAAW,UACXC,OAAQK,uBAAa,CAACD,YAAa,iGAEvC,CACI7B,KAAM,2DACNwB,UAAW,YACXO,UAAWV,EACXI,OAAQO,qBAAW,CAACC,MAAO,CAACC,MAAO,QAASL,YAAa,yEAG7D,CACI7B,KAAM,iCACNwB,UAAW,OACXC,OAAQU,qBAAW,CAACN,YAAa,iGAGrC,CACI7B,KAAM,yDACNwB,UAAW,QACXC,OAAQK,uBAAa,CAACD,YAAa,gGACnCO,MAAM,GAGV,CACIpC,KAAM,6CACNwB,UAAW,UACXC,OAAQK,uBAAa,CAACD,YAAa,gGACnCO,MAAM,GAGV,CACIpC,KAAM,sHACNwB,UAAW,aACXC,OAAQC,uBAAa,CACjBC,QAAS,CACLU,EAAG,eACHC,EAAG,sBAEPT,YAAa,OAGrB,CACI7B,KAAM,0GACNwB,UAAW,YACXC,OAAQC,uBAAa,CACjBC,QAAS,CACLU,EAAG,+DACHC,EAAG,qEACHC,EAAG,gEAEPV,YAAa,QAIzBD,KAAKY,SAAS,CAAC9B,QAASA,EAASI,cAAec,KAAKa,UAAWtC,UAAWC,O,gCASnF,QAASwB,KAAK1B,MAAMC,WAAayB,KAAK1B,MAAMS,MAAQiB,KAAK1B,MAAMW,IAAMe,KAAK1B,MAAMO,U,kCAGvE,IAAD,SAC8BmB,KAAK1B,MAApCC,EADC,EACDA,UAAWM,EADV,EACUA,OAAQE,EADlB,EACkBA,KAAME,EADxB,EACwBA,GAC1B6B,EAAY/B,EAAKgC,UAAY,IAC7BC,EAAU/B,EAAG8B,UAAY,IAE/B,SAASE,EAAWC,EAAOC,EAAOC,GAC9B,OAAOA,EAAKC,QAAQH,KAAWC,EAGnCnB,KAAKY,SAAS,CAACzB,WAAW,EAAMX,GAAGD,IAEnC+C,MADY,mEAAqE/C,EAAY,UAAYM,EAAS,eAAiBiC,EAAY,aAAeE,GAEzJO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,OACZF,MAAK,SAAAG,GACF,IAAI9C,EAAO+C,OAAOC,OAAOF,EAAQ,SAAR,OACrB/C,EAASC,EAAKiD,KAAI,SAAAC,GAAI,OAAIA,EAAKC,cAEnCpD,GADAA,EAASA,EAAOkB,OAAOoB,IACPY,KAAI,SAACG,GACjB,MAAO,CAACd,MAAOc,EAAOC,MAAOD,MAEjC,EAAKpB,SAAS,CAACjC,OAAQA,EAAQC,KAAMA,OACtC2C,MAAK,kBAAM,EAAKX,SAAS,CAACzB,WAAW,Y,kCAGxCN,GACRmB,KAAKY,SAAS,CAAC/B,OAAQA,EAAQK,cAAec,KAAKa,c,sCAGtC,IAAD,EACOb,KAAK1B,MAAjBS,EADK,EACLA,KAAME,EADD,EACCA,GACRF,GAGDmD,IAAOjD,GAAIkD,KAAKD,IAAOnD,GAAO,UAAY,GAC1CiB,KAAKf,GAAGmD,eAAeC,UAAUtD,K,uCAIxBA,GAEbiB,KAAKY,SAAS,CAAC7B,KAAMA,EAAMG,cAAec,KAAKa,c,qCAGpC5B,GACXe,KAAKY,SAAS,CAAC3B,GAAIA,EAAIC,cAAec,KAAKa,WAAYb,KAAKsC,iB,+BAGtD,IAAD,SAC8DtC,KAAK1B,MAAjES,EADF,EACEA,KAAME,EADR,EACQA,GAAIR,EADZ,EACYA,MAAOK,EADnB,EACmBA,QAASF,EAD5B,EAC4BA,KAAMM,EADlC,EACkCA,cAAeC,EADjD,EACiDA,UAChDoD,EAAY,CAACC,MAAOzD,EAAM0D,IAAKxD,GAGrC,OACI,oCACI,kBAACyD,EAAA,EAAD,CAAQC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QAClC,kBAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,SAAnB,QAIJ,kBAACC,EAAA,EAAD,CAAWC,UAAU,aACjB,kBAACC,EAAA,EAAD,CAAKD,UAAU,kBAEX,kBAAC,IAAD,CAAQlD,QAAS,CAAC,CAACmB,MAAO,KAAMe,MAAO,0DAAc,CACjDf,MAAO,KACPe,MAAO,qDAEH5B,MAAO,CAACC,MAAO,KACf6C,SAAU,SAAAC,GAAG,OAAI,EAAKC,aAAaD,EAAI,GAAGlC,UAElD,yBAAK+B,UAAU,oBACX,kBAAC,IAAD,CACI/B,MAAOnC,EACPkB,YAAY,SACZqD,OAAO,KACP7D,WAAYA,aACZ8D,UAAWA,YACXC,eAAgB,CAEZC,aAAc,CAAC1E,EAAM,CAACA,OAAME,OAC5ByE,aAAc,CAACC,MAAOlF,GACtBmF,QAAS3E,EACTsD,YACAsB,eAAgB,EAChBC,OAAQ,KACRC,YAAaC,IACbC,WAAY,kBAAM,EAAKhF,GAAGiF,WAAWC,UAEzCC,YAAapE,KAAKX,mBACnB,IAnBP,SAoBM,IACF,0BAAM4D,UAAU,kBACR,kBAAC,IAAD,CACIoB,IAAK,SAAAC,GAAE,OAAK,EAAKrF,GAAKqF,GACtBpD,MAAOjC,EACPgB,YAAY,eACZqD,OAAO,KACP7D,WAAYA,aACZ8D,UAAWA,YACXC,eAAgB,CACZC,aAAc,CAAC1E,EAAM,CAACA,OAAME,OAC5ByE,aAAc,CAACa,OAAQxF,EAAM4E,MAAOlF,GACpC8D,YACAiC,MAAOzF,EACP0F,UAAW1F,EACX8E,eAAgB,EAChBC,OAAQ,KACRC,YAAaC,KAEjBI,YAAapE,KAAKT,kBAG9B,kBAACmF,EAAA,EAAD,QAKR,kBAACxB,EAAA,EAAD,CAAKD,UAAU,kBACX,kBAAC0B,EAAA,EAAKC,MAAN,CAAYC,UAAU,gCAClB,kBAACF,EAAA,EAAKG,MAAN,wMACA,kBAACH,EAAA,EAAKI,QAAN,CAAcC,GAAG,WAAWC,KAAK,IACnB9B,SAAU,SAAA+B,GAAK,OAAI,EAAK1F,YAAY0F,EAAMC,OAAOjE,YAIvE,kBAACgC,EAAA,EAAD,CAAKD,UAAU,kBACX,kBAACmC,EAAA,EAAD,CAAQvC,QAAQ,UAAUwC,KAAK,KAAKC,OAAK,EACjCC,SAAUrG,GAAiBC,EAC3BqG,SAAUrG,IAAcD,GAAgBc,KAAKyF,UAAUnG,KAAKU,OAC/Db,EAAY,sDAAgB,gGAGrC,kBAAC+D,EAAA,EAAD,CAAKD,UAAU,kBACX,kBAAC,IAAD,CACIrE,KAAMA,EACN8G,SAAS,QACT1H,UAAWA,EACX6B,OAAQ8F,MACRC,WAAYC,MACZC,SAAO,EACPC,WAAS,EAETjH,QAASA,W,GAtVnBkH,aC5BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtF,MAAK,SAAAuF,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a",
  "file": "static/js/main.01f07cc2.chunk.js",
  "sourcesContent": [
    "import React, {Component} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n    Container,\r\n    Navbar,\r\n    Row,\r\n    Button,\r\n    Form\r\n} from 'react-bootstrap'\r\n\r\nimport MomentLocaleUtils, {formatDate, parseDate} from 'react-day-picker/moment';\r\nimport DayPickerInput from \"react-day-picker/DayPickerInput\";\r\nimport \"./MyComponents/date_unput.css\"\r\nimport \"react-day-picker/lib/style.css\";\r\nimport './App.css';\r\n\r\nimport moment from \"moment\";\r\nimport 'moment/locale/ru'\r\nimport {Helmet} from 'react-helmet'\r\nimport Select from \"react-dropdown-select\";\r\n\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport filterFactory, {\r\n    dateFilter,\r\n    numberFilter,\r\n    textFilter,\r\n    selectFilter\r\n} from 'react-bootstrap-table2-filter';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\n\r\nconst expandRow = {\r\n    onlyOneExpanding: true,\r\n    renderer: row => (\r\n        <div>\r\n            <p>Полный текст:</p>\r\n            <p>'${row.text}'</p>\r\n        </div>\r\n    )\r\n};\r\n\r\nclass App extends Component {\r\n    state = {\r\n        Chosen_SN: \"\",\r\n        SN: \"\",\r\n        today: new Date(),\r\n        groups: [],\r\n        data: [],\r\n        sm_ids: [],\r\n        columns: [{\r\n            text: \"Тут будут посты\"\r\n        }],\r\n        from: undefined,\r\n        to: undefined,\r\n        buttonDisable: true,\r\n        isLoading: false\r\n    };\r\n    initial_state = {...this.state};\r\n\r\n\r\n    constructor() {\r\n        super();\r\n        // eslint-disable-next-line react-hooks/rules-of-hooks\r\n        this.handleFromChange = this.handleFromChange.bind(this);\r\n        this.handleToChange = this.handleToChange.bind(this);\r\n        // this.handleSelect = this.handleSelect.bind(this);\r\n        // this.load_data = this.load_data.bind(this);\r\n        this.handleInput = this.handleInput.bind(this);\r\n    }\r\n\r\n    handleSelect(SN) {\r\n        let columns = []\r\n\r\n        function formatDate(date) {\r\n            return new Date(date).toLocaleString('ru-RU')\r\n        }\r\n\r\n        switch (SN) {\r\n            case ('vk'):\r\n                columns = [\r\n                    {\r\n                        text: \"Группа\",\r\n                        dataField: 'group_name',\r\n                        filter: selectFilter({\r\n                            options: this.state.groups,\r\n                            placeholder: ' '\r\n                        })\r\n                    },\r\n                    {\r\n                        text: \"Подписчики\",\r\n                        dataField: \"members\",\r\n                        filter: numberFilter({placeholder: 'Введите значение'})\r\n                    },\r\n                    {\r\n                        text: \"Дата, время\",\r\n                        dataField: \"post_date\",\r\n                        formatter: formatDate,\r\n                        filter: dateFilter({\r\n                            style: {width: \"100%\"},\r\n                            placeholder: 'Введите дату'\r\n                        })\r\n                    }\r\n                    ,\r\n                    {\r\n                        text: \"Текст/n\",\r\n                        dataField: \"text\",\r\n                        filter: textFilter({placeholder: 'Введите значение'})\r\n\r\n                    }\r\n                    ,\r\n                    {\r\n                        text: \"Просмотры\",\r\n                        dataField: \"views\",\r\n                        filter: numberFilter({placeholder: 'Введите значение'}),\r\n                        sort: true\r\n                    }\r\n                    ,\r\n                    {\r\n                        text: \"Лайки\",\r\n                        dataField: \"likes\",\r\n                        filter: numberFilter({placeholder: 'Введите значение'}),\r\n                        sort: true\r\n                    }\r\n                    ,\r\n                    {\r\n                        text: \"Репосты\",\r\n                        dataField: \"reposts\",\r\n                        filter: numberFilter({placeholder: 'Введите значение'}),\r\n                        sort: true\r\n                    }\r\n                    ,\r\n                    {\r\n                        text: \"Комментарии\",\r\n                        dataField: \"comments\",\r\n                        filter: numberFilter({placeholder: 'Введите значение'}),\r\n                        sort: true\r\n                    }\r\n                    ,\r\n                    {\r\n                        text: \"Аномальные просмотры\",\r\n                        dataField: \"is_anomaly\",\r\n                        filter: selectFilter({\r\n                            options: {\r\n                                0: 'Да',\r\n                                1: 'Нет'\r\n                            },\r\n                            placeholder: ' '\r\n                        })\r\n                    },\r\n                    {\r\n                        text: \"Тональный характер\",\r\n                        dataField: \"sentiment\",\r\n                        filter: selectFilter({\r\n                            options: {\r\n                                0: 'Позитивный',\r\n                                1: 'Нейтральный',\r\n                                2: 'Негативный'\r\n                            },\r\n                            placeholder: ' '\r\n                        })\r\n                    }\r\n                ]\r\n                this.setState({columns: columns, buttonDisable: this.isReady(), Chosen_SN: SN})\r\n                break;\r\n            case ('tg'):\r\n                columns = [\r\n                    {\r\n                        text: \"Группа\",\r\n                        dataField: 'group_name',\r\n                        filter: selectFilter({\r\n                            options: this.state.groups,\r\n                            placeholder: ' '\r\n                        })\r\n                    },\r\n                    {\r\n                        text: \"Подписчики\",\r\n                        dataField: \"members\",\r\n                        filter: numberFilter({placeholder: 'Введите значение'})\r\n                    },\r\n                    {\r\n                        text: \"Дата, время\",\r\n                        dataField: \"post_date\",\r\n                        formatter: formatDate,\r\n                        filter: dateFilter({style: {width: \"100%\"}, placeholder: 'Введите дату'})\r\n                    }\r\n                    ,\r\n                    {\r\n                        text: \"Текст\",\r\n                        dataField: \"text\",\r\n                        filter: textFilter({placeholder: 'Введите значение'})\r\n                    }\r\n                    ,\r\n                    {\r\n                        text: \"Просмотры\",\r\n                        dataField: \"views\",\r\n                        filter: numberFilter({placeholder: 'Введите значение'}),\r\n                        sort: true\r\n                    }\r\n                    ,\r\n                    {\r\n                        text: \"Репосты\",\r\n                        dataField: \"reposts\",\r\n                        filter: numberFilter({placeholder: 'Введите значение'}),\r\n                        sort: true\r\n                    }\r\n                    ,\r\n                    {\r\n                        text: \"Аномальные просмотры\",\r\n                        dataField: \"is_anomaly\",\r\n                        filter: selectFilter({\r\n                            options: {\r\n                                0: 'Да',\r\n                                1: 'Нет'\r\n                            },\r\n                            placeholder: ' '\r\n                        })\r\n                    },\r\n                    {\r\n                        text: \"Тональный характер\",\r\n                        dataField: \"sentiment\",\r\n                        filter: selectFilter({\r\n                            options: {\r\n                                0: 'Позитивный',\r\n                                1: 'Нейтральный',\r\n                                2: 'Негативный'\r\n                            },\r\n                            placeholder: ' '\r\n                        })\r\n                    }\r\n                ]\r\n                this.setState({columns: columns, buttonDisable: this.isReady(), Chosen_SN: SN})\r\n                break\r\n            default:\r\n                break\r\n        }\r\n\r\n    }\r\n\r\n    isReady() {\r\n        return !(this.state.Chosen_SN && this.state.from && this.state.to && this.state.sm_ids)\r\n    }\r\n\r\n    load_data() {\r\n        const {Chosen_SN, sm_ids, from, to} = this.state\r\n        const from_unix = from.getTime() / 1000\r\n        const to_unix = to.getTime() / 1000\r\n\r\n        function onlyUnique(value, index, self) {\r\n            return self.indexOf(value) === index;\r\n        }\r\n\r\n        this.setState({isLoading: true, SN:Chosen_SN})\r\n        const url = 'https://kozinov.azurewebsites.net/api/statistics?social_network=' + Chosen_SN + '&sm_id=' + sm_ids + '&start_date=' + from_unix + '&end_date=' + to_unix\r\n        fetch(url)\r\n            .then(res => res.json()\r\n                .then(response => {\r\n                    let data = Object.values(response[\"response\"][\"posts\"])\r\n                    let groups = data.map(post => post.group_name)\r\n                    groups = groups.filter(onlyUnique)\r\n                    groups = groups.map((group) => {\r\n                        return {value: group, label: group}\r\n                    })\r\n                    this.setState({groups: groups, data: data})\r\n                }).then(() => this.setState({isLoading: false})))\r\n    }\r\n\r\n    handleInput(sm_ids) {\r\n        this.setState({sm_ids: sm_ids, buttonDisable: this.isReady()})\r\n    }\r\n\r\n    showFromMonth() {\r\n        const {from, to} = this.state;\r\n        if (!from) {\r\n            return;\r\n        }\r\n        if (moment(to).diff(moment(from), 'months') < 2) {\r\n            this.to.getDayPicker().showMonth(from);\r\n        }\r\n    }\r\n\r\n    handleFromChange(from) {\r\n        // Change the from date and focus the \"to\" input field\r\n        this.setState({from: from, buttonDisable: this.isReady()});\r\n    }\r\n\r\n    handleToChange(to) {\r\n        this.setState({to: to, buttonDisable: this.isReady()}, this.showFromMonth);\r\n    }\r\n\r\n    render() {\r\n        const {from, to, today, columns, data, buttonDisable, isLoading} = this.state;\r\n        const modifiers = {start: from, end: to};\r\n\r\n\r\n        return (\r\n            <>\r\n                <Navbar expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                    <Navbar.Brand href=\"#home\">\r\n                        APP\r\n                    </Navbar.Brand>\r\n                </Navbar>\r\n                <Container className='mt-4 mb-4'>\r\n                    <Row className='ml-4 mr-4 mb-4'>\r\n\r\n                        <Select options={[{value: 'vk', label: 'ВКонтакте'}, {\r\n                            value: 'tg',\r\n                            label: 'Телеграм'\r\n                        }]}\r\n                                style={{width: 150}}\r\n                                onChange={val => this.handleSelect(val[0].value)}\r\n                        />\r\n                        <div className=\"InputFromTo ml-4\">\r\n                            <DayPickerInput\r\n                                value={from}\r\n                                placeholder=\"С\"\r\n                                format=\"LL\"\r\n                                formatDate={formatDate}\r\n                                parseDate={parseDate}\r\n                                dayPickerProps={{\r\n                                    // eslint-disable-next-line\r\n                                    selectedDays: [from, {from, to}],\r\n                                    disabledDays: {after: today},\r\n                                    toMonth: to,\r\n                                    modifiers,\r\n                                    numberOfMonths: 2,\r\n                                    locale: 'ru',\r\n                                    localeUtils: MomentLocaleUtils,\r\n                                    onDayClick: () => this.to.getInput().focus(),\r\n                                }}\r\n                                onDayChange={this.handleFromChange}\r\n                            />{' '}\r\n                            —{' '}\r\n                            <span className=\"InputFromTo-to\">\r\n                                    <DayPickerInput\r\n                                        ref={el => (this.to = el)}\r\n                                        value={to}\r\n                                        placeholder=\"По\"\r\n                                        format=\"LL\"\r\n                                        formatDate={formatDate}\r\n                                        parseDate={parseDate}\r\n                                        dayPickerProps={{\r\n                                            selectedDays: [from, {from, to}],\r\n                                            disabledDays: {before: from, after: today},\r\n                                            modifiers,\r\n                                            month: from,\r\n                                            fromMonth: from,\r\n                                            numberOfMonths: 2,\r\n                                            locale: 'ru',\r\n                                            localeUtils: MomentLocaleUtils,\r\n                                        }}\r\n                                        onDayChange={this.handleToChange}\r\n                                    />\r\n                                    </span>\r\n                            <Helmet>\r\n                            </Helmet>\r\n                        </div>\r\n\r\n                    </Row>\r\n                    <Row className='ml-4 mr-4 mb-4'>\r\n                        <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                            <Form.Label>Введите ссылки на сети через запятую</Form.Label>\r\n                            <Form.Control as=\"textarea\" rows=\"3\"\r\n                                          onChange={event => this.handleInput(event.target.value)}\r\n                            />\r\n                        </Form.Group>\r\n                    </Row>\r\n                    <Row className='ml-4 mr-4 mb-4'>\r\n                        <Button variant=\"primary\" size=\"lg\" block\r\n                                disabled={buttonDisable || isLoading}\r\n                                onClick={!isLoading && !buttonDisable ? this.load_data.bind(this) : false}>\r\n                            {isLoading ? 'Загрузка...' : 'Загрузить данные'}\r\n                        </Button>\r\n                    </Row>\r\n                    <Row className='ml-4 mr-4 mb-4'>\r\n                        <BootstrapTable\r\n                            data={data}\r\n                            keyField=\"index\"\r\n                            expandRow={expandRow}\r\n                            filter={filterFactory()}\r\n                            pagination={paginationFactory()}\r\n                            striped\r\n                            condensed\r\n                            // defaultSorted={ defaultSorted }\r\n                            columns={columns}\r\n                        />\r\n                    </Row>\r\n                </Container>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;",
    "// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n",
    "import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"
  ],
  "sourceRoot": ""
}